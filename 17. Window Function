Note: You can't use window functions and standard aggregations in the same query. More specifically, you can't include window functions in a GROUP BY clause.

-- Create an additional column named max_salary showing the MAX(salary) to each records/rows.
-- MAX(salary) is treated as a window function instead of aggregate becauses of OVER() and wont reduce the number of records/rows.
SELECT *,
MAX(salary) OVER() AS max_salary
FROM employee

-- Create an additional column named max_salary showing the MAX(salary) from "the dept_name" to each record/rows.
-- PARTITION BY behaves similarly like GROUP BY except it is used with OVER().
SELECT *,
MAX(salary) OVER(PARTITION BY dept_name) AS max_salary
FROM employee


-- PARTITION BY is Optional
-- ORDER BY is Mandatory
ROW_NUMBER ( ) OVER ( [ PARTITION BY value_expression , ... [ n ] ] ORDER BY ...)

SELECT *,
ROW_NUMBER() OVER(PARTITION BY dept_name ORDER BY emp_ID) AS rownumber -- rownumber will reset when dept_name changes
FROM employee

SELECT *
FROM (Query) x
WHERE x.rownumber < 3


-- ROW_NUMBER and RANK are similar.
-- ROW_NUMBER numbers all rows sequentially (for example 1, 2, 3, 4, 5).
-- RANK provides the same numeric value for ties (for example 1, 2, 2, 4, 5) and skip values.
-- DENSE_RANK() doesnt skip values.

SELECT *,
RANK() OVER (PARTITION BY dept_name ORDER BY salary)
FROM employee


-- NTILE


-- You can use LAG or LEAD to create columns that pull values from other rows.
-- All you need to do is enter which column to pull from and how many rows away you'd like to do the pull.
-- LAG pulls from previous rows and LEAD pulls from following rows:

SELECT *,
LAG(salary, a, b) OVER (PARTITION BY dept_name ORDER BY emp_id)
-- a = how many rows away to do the pull, default = 1
-- b = value if theres nothing to pull from, default = NULL
FROM employee


-- Defining a window alias

SELECT start_terminal,
       duration_seconds,
       NTILE(4) OVER ntile_window AS quartile,
       NTILE(5) OVER ntile_window AS quintile,
       NTILE(100) OVER ntile_window AS percentile
  FROM tutorial.dc_bikeshare_q1_2012
 WHERE start_time < '2012-01-08'
WINDOW ntile_window AS
         (PARTITION BY start_terminal ORDER BY duration_seconds)
 ORDER BY start_terminal, duration_seconds
 
 -- The WINDOW clause, if included, should always come after the WHERE clause.
